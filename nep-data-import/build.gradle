/*
 * Copyright (c) 2014-2017. Institute for International Programs at Johns Hopkins University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the NEP project, Institute for International Programs,
 * Johns Hopkins University nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

defaultTasks 'build'

def language = ["en"]
if (project.hasProperty("lang")) {
    language = lang.split(",")
}

task build() {
    println "Building for language: ${language}"
    def dependsOn = []

    language.each { l ->
        task "copyManifest_$l"(type: Copy) {
            println "copyManifest_${l}"
            from projectDir
            into projectDir
            include "manifest_${l}.webapp"
            rename "manifest_${l}.webapp", "manifest.webapp"
        }

        task "compress_$l"(type: Zip) {

            println "compress_${l}"

            from projectDir

            include 'bower_components/**/*'
            include 'icons/*'
            include 'js/*'
            include 'index.html'
            include 'manifest.webapp'

            destinationDir file(projectDir)
            archiveName ("nep-data-import-${l}.zip")
        }

        dependsOn << "compress_${l}"
        dependsOn << "copyManifest_${l}"

        tasks."compress_${l}".shouldRunAfter("copyManifest_${l}")
    }

    tasks.build.dependsOn(dependsOn)
}
